<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>TypeScript学习笔记系列(一)---基础类型</title>
      <link href="/2018/12/14/TypeScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97(%E4%B8%80)---%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/"/>
      <url>/2018/12/14/TypeScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97(%E4%B8%80)---%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>typeScript</code>是<code>javascript</code>的类型的超集, 它可以编译成纯<code>javascript</code></p><p><code>typescript</code>可以在任何浏览器、任何计算机和任何操作系统上运行, 并且是开源的</p></blockquote><h2 id="初始准备"><a href="#初始准备" class="headerlink" title="初始准备"></a>初始准备</h2><ul><li><a href="https://www.tslang.cn/index.html" target="_blank" rel="noopener">中文官方文档</a></li><li>这里就不教大家怎么安装typescript了, 大家可以去看下<a href="https://www.tslang.cn/docs/handbook/typescript-in-5-minutes.html" target="_blank" rel="noopener">官方安装教程</a> 里面有着详细安装介绍</li><li>安装完成后, 大家可以创建个学习typescript的demo</li></ul><h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><ul><li><h5 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> bl<span class="token punctuation">:</span> Boolean <span class="token operator">=</span> <span class="token keyword">true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bl<span class="token punctuation">)</span></code></pre></li><li><h5 id="number"><a href="#number" class="headerlink" title="number"></a>number</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> num<span class="token punctuation">:</span> Number <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">let</span> binaryLiteral<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0b1010</span><span class="token punctuation">;</span>num <span class="token operator">=</span> <span class="token number">2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span></code></pre><blockquote><p> Tip: number 支持2, 8, 10, 16进制字面量</p></blockquote></li><li><h5 id="string"><a href="#string" class="headerlink" title="string"></a>string</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> str<span class="token punctuation">:</span> String <span class="token operator">=</span> <span class="token string">'123'</span> <span class="token comment" spellcheck="true">// ES5</span><span class="token keyword">let</span> Str<span class="token punctuation">:</span> String <span class="token operator">=</span> <span class="token template-string"><span class="token string">`String`</span></span> <span class="token comment" spellcheck="true">// ES6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> Str<span class="token punctuation">)</span></code></pre></li><li><h5 id="array"><a href="#array" class="headerlink" title="array"></a>array</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> arr<span class="token punctuation">:</span> Number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 写法1</span><span class="token keyword">let</span> arr2<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span>str<span class="token punctuation">,</span> Str<span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 写法2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span></code></pre></li><li><h5 id="元组Tuple"><a href="#元组Tuple" class="headerlink" title="元组Tuple"></a>元组Tuple</h5><blockquote><p>元组类型允许表示一个已知元素数量和类型的数组(<strong>即固定长度和类型的数组</strong>)</p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> tuple<span class="token punctuation">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Boolean<span class="token punctuation">]</span>tuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">]</span></code></pre></li><li><h5 id="枚举-enum"><a href="#枚举-enum" class="headerlink" title="枚举 enum"></a>枚举 enum</h5><blockquote><p><code>enum</code>类型是对JavaScript标准数据类型的一个补充。 像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。</p></blockquote><ul><li><p>数字类型枚举, 允许我们将数字类型或者其他任何与数字类型兼容的类型赋值给枚举类型的实例。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>    red<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 0</span>    green<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 1</span>    blue <span class="token comment" spellcheck="true">// 2</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 编译为js</span><span class="token keyword">var</span> Color<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>Color<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Color<span class="token punctuation">[</span>Color<span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>    Color<span class="token punctuation">[</span>Color<span class="token punctuation">[</span><span class="token string">"green"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"green"</span><span class="token punctuation">;</span>    Color<span class="token punctuation">[</span>Color<span class="token punctuation">[</span><span class="token string">"blue"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Color <span class="token operator">||</span> <span class="token punctuation">(</span>Color <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 结果</span>Color <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">"red"</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">"blue"</span><span class="token punctuation">,</span>  blue<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  green<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  red<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span></code></pre><blockquote><p>Tip: 默认情况下，第一个枚举值是 <code>0</code>，然后每个后续值依次递增 1</p><p>​    但是，你可以通过特定的赋值来改变给任何枚举成员关联的数字, 如下: </p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>  DarkRed <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 3</span>  DarkGreen<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 4</span>  DarkBlue <span class="token comment" spellcheck="true">// 5</span><span class="token punctuation">}</span></code></pre></li><li><p>字符串枚举</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> EvidenceTypeEnum <span class="token punctuation">{</span>  UNKNOWN <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>  PASSPORT_VISA <span class="token operator">=</span> <span class="token string">'passport_visa'</span><span class="token punctuation">,</span>  PASSPORT <span class="token operator">=</span> <span class="token string">'passport'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 结果</span>EvidenceTypeEnum <span class="token operator">=</span> <span class="token punctuation">{</span>  UNKNOWN<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>  PASSPORT_VISA<span class="token punctuation">:</span> <span class="token string">'passport_visa'</span><span class="token punctuation">,</span>  PASSPORT<span class="token punctuation">:</span> <span class="token string">'passport'</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre></li><li><p>有静态方法枚举</p><blockquote><p>使用 <code>enum</code> + <code>namespace</code> 的声明的方式向枚举类型添加静态方法。</p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Weekday <span class="token punctuation">{</span>  Monday<span class="token punctuation">,</span>  Tuseday<span class="token punctuation">,</span>  Wednesday<span class="token punctuation">,</span>  Thursday<span class="token punctuation">,</span>  Friday<span class="token punctuation">,</span>  Saturday<span class="token punctuation">,</span>  Sunday<span class="token punctuation">}</span>namespace Weekday <span class="token punctuation">{</span>  <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isBusinessDay</span><span class="token punctuation">(</span>day<span class="token punctuation">:</span> Weekday<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> Weekday<span class="token punctuation">.</span>Saturday<span class="token punctuation">:</span>      <span class="token keyword">case</span> Weekday<span class="token punctuation">.</span>Sunday<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> mon <span class="token operator">=</span> Weekday<span class="token punctuation">.</span>Monday<span class="token punctuation">;</span><span class="token keyword">const</span> sun <span class="token operator">=</span> Weekday<span class="token punctuation">.</span>Sunday<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Weekday<span class="token punctuation">.</span><span class="token function">isBusinessDay</span><span class="token punctuation">(</span>mon<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Weekday<span class="token punctuation">.</span><span class="token function">isBusinessDay</span><span class="token punctuation">(</span>sun<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>开放式枚举</p><blockquote><p>通过之前ts枚举编译为js的代码中我们可以发现, 它会在匿名自执行函数中传入<strong>同枚举名称相同的变量</strong>,这意味着你可以<strong>跨多个文件拆分（和扩展）枚举定义</strong></p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>  Red<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 0</span>  Green<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 1</span>  Blue <span class="token comment" spellcheck="true">// 2</span><span class="token punctuation">}</span><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>  DarkRed <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 因枚举值为2, 会覆盖掉Blue</span>  DarkGreen<span class="token punctuation">,</span>  DarkBlue<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 结果</span>Color <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">"Red"</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"Green"</span><span class="token punctuation">,</span>    <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">"DarkRed"</span><span class="token punctuation">,</span>    <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">"DarkGreen"</span><span class="token punctuation">,</span>    <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">"DarkBlue"</span><span class="token punctuation">,</span>    Blue<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    DarkBlue<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    DarkGreen<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    DarkRed<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    Green<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    Red<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><h5 id="any"><a href="#any" class="headerlink" title="any"></a>any</h5><blockquote><p>顾名思义, <code>any</code>代表该变量可以为任何类型, <code>typescript</code>跳过该变量类型检测</p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> <span class="token keyword">number</span><span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">let</span> <span class="token keyword">string</span><span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token string">'1'</span></code></pre></li><li><h5 id="void"><a href="#void" class="headerlink" title="void"></a>void</h5><blockquote><p>函数无返回值其返回类型为<code>void</code></p><p>声明一个void类型的变量没有什么大用，因为你只能为它赋予<code>undefined</code>和<code>null</code></p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> fun <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fun'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> unusable<span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> <span class="token keyword">null</span>    </code></pre></li><li><h5 id="undefined-amp-null"><a href="#undefined-amp-null" class="headerlink" title="undefined &amp; null"></a>undefined &amp; null</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> u<span class="token punctuation">:</span> undefined <span class="token operator">=</span> undefined<span class="token punctuation">;</span><span class="token keyword">let</span> n<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre></li><li><h5 id="never"><a href="#never" class="headerlink" title="never"></a>never</h5><blockquote><p><code>never</code>类型表示的是那些永不存在的值的类型。</p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 返回never的函数必须存在无法达到的终点</span><span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 推断的返回值类型为never</span><span class="token keyword">function</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Something failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 返回never的函数必须存在无法达到的终点</span><span class="token keyword">function</span> <span class="token function">infiniteLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><h5 id="object"><a href="#object" class="headerlink" title="object"></a>object</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> obj<span class="token punctuation">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    以上就是对typescript的基础类型进行的一些简单的总结, 可以看到ts在原生js已有的类型上, 加入了元组, 枚举.</p><p>​    在别的语言中, 枚举类型是强类型的，从而保证了系统安全性。枚举可以限定参数的个数，对调用者的行为能更加严格地进行控制。<strong>把一些运行期的参数检查放到了编译期</strong>，这点很重要。</p><p>​    同样元组也是<strong>预先定义数组的长度以及类型</strong>, 可以替开发者在赋值时进行检测.</p><p>​     ts使js这门弱类型语言有了强类型的属性, 也体现了ts的一个核心原则: 对值所具有结构进行<strong>类型检查</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://www.tslang.cn/docs/handbook/basic-types.html" target="_blank" rel="noopener">官方文档-基础类型</a></p></li><li><p><a href="https://jkchao.github.io/typescript-book-chinese/typings/enums.html#%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B%E6%9E%9A%E4%B8%BE%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B" target="_blank" rel="noopener">深入理解TypeScript</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typeScript </tag>
            
            <tag> 类型检测 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>新手小白搭建基于Hexo的博客流程</title>
      <link href="/2018/12/10/%E6%96%B0%E6%89%8B%E5%B0%8F%E7%99%BD%E6%90%AD%E5%BB%BA%E7%BB%99%E4%BA%88Hexo%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B/"/>
      <url>/2018/12/10/%E6%96%B0%E6%89%8B%E5%B0%8F%E7%99%BD%E6%90%AD%E5%BB%BA%E7%BB%99%E4%BA%88Hexo%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="新手小白搭建基于Hexo的博客流程"><a href="#新手小白搭建基于Hexo的博客流程" class="headerlink" title="新手小白搭建基于Hexo的博客流程"></a>新手小白搭建基于Hexo的博客流程</h1><blockquote></blockquote><h2 id="初始准备工具"><a href="#初始准备工具" class="headerlink" title="初始准备工具"></a>初始准备工具</h2><ul><li><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">安装git</a></li><li><a href="https://github.com/blinkfox/typora-vue-theme.git" target="_blank" rel="noopener">安装nodeJs</a></li></ul><h2 id="安装git-以win为例-mac下请使用终端"><a href="#安装git-以win为例-mac下请使用终端" class="headerlink" title="安装git(以win为例, mac下请使用终端)"></a>安装git(以win为例, mac下请使用终端)</h2><ol><li><p><a href="https://jingyan.baidu.com/article/90895e0fb3495f64ed6b0b50.html" target="_blank" rel="noopener">window下安装git教程</a>  <a href="https://jingyan.baidu.com/article/2a138328d0df4f074a134fc1.html" target="_blank" rel="noopener">mac下安装git教程</a></p></li><li><p>git 安装完成后，在桌面鼠标右键点击<code>git bash here</code></p><p><img src="https://charmingyouyou-1256314320.picbj.myqcloud.com/blog/hexo_1.png" alt="git-bash-here"></p></li><li><p>在打开的终端中输入以下信息<code>git --version</code> <code>node -v</code> <code>npm -v</code>来判断git和node是否安装成功</p><p><img src="https://charmingyouyou-1256314320.picbj.myqcloud.com/blog/hexo_2.png" alt="hexo_2"></p></li><li><p>在以上指令都显示对应版本号后, 我们的初始准备工作就告一段落了, 接下来就可以正式开始搭建我们的第一个博客了~</p></li></ol><blockquote><p>Tip:  对于想详细了解git和node的同学可以去以下地址学习更多哦~</p><ol><li><a href="https://charmingyouyou-1256314320.picbj.myqcloud.com/blog/hexo_1.png" target="_blank" rel="noopener">git入门教程</a></li><li><a href="http://nodejs.cn/api/" target="_blank" rel="noopener">node官方文档</a></li></ol></blockquote><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><ul><li><h5 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">官方文档</a></h5></li><li><h5 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h5><p>在准备放置博客的文件夹下执行<code>git bash here</code>打开终端后执行<code>npm install -g hexo-cli --registry=https://registry.npm.taobao.org</code>(mac用户请在root下执行该语句)</p></li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c728dda55c?imageView2/0/w/1280/h/960/" alt="hexo安装成功"></p><ul><li><h5 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h5></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 域名 </tag>
            
            <tag> github Page </tag>
            
            <tag> markDown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>小程序页面组件通信</title>
      <link href="/2018/12/06/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A1%B5%E9%9D%A2%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
      <url>/2018/12/06/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A1%B5%E9%9D%A2%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="场景需求"><a href="#场景需求" class="headerlink" title="场景需求"></a>场景需求</h2><blockquote><p>宏观上，微信小程序是由一个个 Page 组成的。有时候我们会遇到一些业务存在耦合的 Page，一个 Page 里某个状态改变后，相关 Page 的状态需要进行更新。而在小程序里，每个 Page 都是一个模块，有着独立的作用域，因此 Page 间需要有一种通信策略。</p></blockquote><blockquote><p>下面是在实际开发中遇到的一个业务场景, 我们应该如何优雅的解决这个问题呢?能够做到局部渲染且无需维护数据</p></blockquote><p><img src="https://charmingyouyou-1256314320.picbj.myqcloud.com/blog/mini_page_1.png?imageView2/1/w/158/h/281" alt="image-20181210153947201"><img src="https://charmingyouyou-1256314320.picbj.myqcloud.com/blog/mini_page_2.png?imageView2/1/w/158/h/281" alt="mini_page_2"><img src="https://charmingyouyou-1256314320.picbj.myqcloud.com/blog/mini_page_3.png?imageView2/1/w/158/h/281" alt="mini_page_3"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h5 id="回退页面重新请求API获取视频进度"><a href="#回退页面重新请求API获取视频进度" class="headerlink" title="回退页面重新请求API获取视频进度"></a>回退页面重新请求API获取视频进度</h5><ul><li><p>优: 简单粗暴, 无需改动</p></li><li><p>缺: 需重新渲染整个列表, 若用户网络环境差, 会白屏; 若用户网络环境好, 会一瞬间闪烁.用户体验极差</p></li></ul><h5 id="将相关时长数据存储至app-globalData-Storage"><a href="#将相关时长数据存储至app-globalData-Storage" class="headerlink" title="将相关时长数据存储至app.globalData || Storage"></a>将相关时长数据存储至app.globalData || Storage</h5><ul><li><p>优: 可只针对视频时长进行局部渲染, 减少性能消耗, 提升用户体验; 容易实现;</p></li><li><p>缺: globalData应存放全局重要信息数据, Storage读取耗时</p><p>​      当业务逻辑比较简单、页面间的耦合度低时可以使用, 否则过多的非核心数据会造成维护困难, 代码冗余.</p></li></ul><h5 id="通过getCurrentPages获取页面栈以调用上个页面的方法"><a href="#通过getCurrentPages获取页面栈以调用上个页面的方法" class="headerlink" title="通过getCurrentPages获取页面栈以调用上个页面的方法"></a>通过getCurrentPages获取页面栈以调用上个页面的方法</h5><p><img src="https://charmingyouyou-1256314320.picbj.myqcloud.com/blog/mini_page_4.png?imageView2/1/w/490/h/143" alt="image-20181210153947201"></p><ul><li><p>优: 同上; 数据”阅后即焚”无需存储管理;</p></li><li><p>缺: 耦合度太大，过度依赖页面进栈顺序。一旦在以后的产品迭代中页面顺序发生变化，将很难去维护。</p></li></ul><h2 id="最终方案-发布／订阅模式"><a href="#最终方案-发布／订阅模式" class="headerlink" title="最终方案(发布／订阅模式)"></a>最终方案(发布／订阅模式)</h2><h5 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h5><p>发布／订阅模式由一个发布者、多个订阅者以及一个调度中心所组成。订阅者们先在调度中心订阅某一事件并注册相应的回调函数，当某一时刻发布者发布了一个事件，调度中心会取出订阅了该事件的订阅者们所注册的回调函数来执行。在发布／订阅模式中，<strong>订阅者和发布者并不需要关心对方的状态</strong>，订阅者只管订阅事件并注册回调、发布者只管发布事件，其余一切交给调度中心来调度，从而能实现解耦。</p><p><img src="https://misc.aotu.io/Chen-jj/publish.png" alt="图片"></p><h5 id="优点"><a href="#优点" class="headerlink" title="优点:"></a>优点:</h5><p>​    耦合性低, 数据’阅后即焚’无需维护数据, 局部渲染</p><h5 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Event</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>eventObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  on <span class="token punctuation">(</span>id<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> that<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'[object Function]'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`fn must be a fuction: 订阅失败`</span></span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>eventObj<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eventObj<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>eventObj<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>fn<span class="token punctuation">,</span> that<span class="token punctuation">}</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">订阅成功`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  off <span class="token punctuation">(</span>id<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&amp;&amp;</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> fnIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eventObj<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>event <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> event<span class="token punctuation">.</span>fn <span class="token operator">===</span> fn      <span class="token punctuation">}</span><span class="token punctuation">)</span>      fnIndex <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eventObj<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>fnIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(fn)注销</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fnIndex <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'成功'</span> <span class="token punctuation">:</span> <span class="token string">'失败'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>eventObj<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">注销成功`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>id <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>eventObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`所有订阅注销成功`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>   emit <span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token operator">...</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`请传入订阅事件Id`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eventObj<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>eventObj<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>event <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          event<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>that<span class="token punctuation">,</span> <span class="token operator">...</span>arg<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`对不起当前id: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">未订阅任何事件`</span></span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">// app.js</span>  <span class="token keyword">import</span> Event <span class="token keyword">from</span> <span class="token string">'utils/event.js'</span>  <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    event<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 全局初始化订阅实例</span>    globalData<span class="token punctuation">:</span> <span class="token punctuation">{</span>      userData<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      formIds<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      sceneValue<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//场景值</span>      adhocData<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// ABtest</span>      purchaseFromPage<span class="token punctuation">:</span> <span class="token string">'tab2'</span><span class="token punctuation">,</span>      pageName<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// index.js(订阅)</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  onLoad<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    app<span class="token punctuation">.</span>event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'bindSuc'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bindAccountCb<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getGlobalData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>event<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// (发布)</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  bindAccountSuccess<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    app<span class="token punctuation">.</span>event<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'bindSuc'</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>ok<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>account<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// (注销)</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  onUnload<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    app<span class="token punctuation">.</span>event<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">'bindSuc'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bindAccountCb<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><blockquote><p>Tip:  1. 不要在onShow去注册事件, 会造成同一事件多次注册</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://aotu.io/notes/2017/01/19/wxapp-event/" target="_blank" rel="noopener">微信小程序跨页面通信解决思路</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
